{"version":3,"sources":["App.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","dailyDataMax","setDailyDataMax","dailyDataMin","setDailyDataMin","dailyDataWeather","setDailyDataWeather","error","setError","className","main","toLowerCase","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","data","console","log","cod","coord","lat","lon","daily","temp","max","min","description","message","catch","err","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","id","feels_like","floor","ReactDOM","render","document","querySelector"],"mappings":"qJAGMA,G,KACC,oCADDA,EAEE,2CAqJOC,EAlJH,WAAO,IAAD,EACUC,qBADV,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGwBJ,mBAAS,IAHjC,mBAGTK,EAHS,KAGKC,EAHL,OAIwBN,mBAAS,IAJjC,mBAITO,EAJS,KAIKC,EAJL,OAKgCR,mBAAS,IALzC,mBAKTS,EALS,KAKSC,EALT,OAMUV,mBAAS,MANnB,mBAMTW,EANS,KAMFC,EANE,KA0FhB,OACE,yBACEC,UACyB,oBAAhBV,EAAQW,KACXX,EAAQA,QAAQ,GAAGW,KAAKC,cACxB,OAGN,8BACE,yBAAKF,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,aACVI,YAAY,SACZC,SAAU,SAACC,GAAD,OAAOjB,EAASiB,EAAEC,OAAOC,QACnCA,MAAOpB,EACPqB,WA/EK,SAACC,GACE,UAAZA,EAAIC,MACNZ,EAAS,IACTa,MAAM,GAAD,OAAI3B,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvD4B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLzB,EAAWyB,GACXC,QAAQC,IAAI,eAAgBF,GAC5B3B,EAAS,IACQ,QAAb2B,EAAKG,KAITF,QAAQC,IAAI,cAAeF,GAC3BJ,MAAM,GAAD,OAAI3B,EAAJ,uBAA2B+B,EAAKI,MAAMC,IAAtC,gBAAiDL,EAAKI,MAAME,IAA5D,uDAC4BrC,IAC9B4B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLvB,EAAgBuB,EAAKO,MAAM,GAAGC,KAAKC,IAAM,QACzC9B,EAAgBqB,EAAKO,MAAM,GAAGC,KAAKE,IAAM,QACzC7B,EAAoBmB,EAAKO,MAAM,GAAGjC,QAAQ,GAAGqC,iBAV/C5B,EAASiB,EAAKY,YAajBC,OAAM,SAACC,GACN/B,EAAS+B,EAAIF,iBA0Dd9B,GACC,yBAAKE,UAAU,eACb,yBAAKA,UAAU,SAASF,IAGJ,oBAAhBR,EAAQW,MACd,6BACE,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,YACZV,EAAQyC,KADX,KACmBzC,EAAQ0C,IAAIC,SAE/B,yBAAKjC,UAAU,QAhEP,SAACkC,GACnB,IAyBIC,EAXO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,WACA,UAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA3BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAeiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAiCDE,CAAY,IAAIC,QAEzC,yBAAK5C,UAAU,eACb,yBAAKA,UAAU,QAAQ6C,KAAKC,MAAMxD,EAAQW,KAAKuB,MAA/C,SACA,yBAAKxB,UAAU,WACb,yBAAK+C,GAAG,cACL,IADH,kBAGGF,KAAKC,MAAMxD,EAAQW,KAAK+C,YAH3B,QAKC1D,EAAQA,QAAQ,GAAGW,KACpB,wCACA,2BAAIL,GACJ,kCACOiD,KAAKI,MAAMzD,GADlB,aAC6C,IAC1CqD,KAAKI,MAAMvD,GAFd,cCxIhBwD,IAASC,OACP,kBAAC,EAAD,MAAOC,SAASC,cAAc,W","file":"static/js/main.e7d0bd4c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst api = {\r\n  key: \"b267e1938cf3553846b90e9d9090a5ed\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\n\r\nconst App = () => {\r\n  const [query, setQuery] = useState();\r\n  const [weather, setWeather] = useState({});\r\n  const [dailyDataMax, setDailyDataMax] = useState([]);\r\n  const [dailyDataMin, setDailyDataMin] = useState([]);\r\n  const [dailyDataWeather, setDailyDataWeather] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  // useEffect(() => {\r\n  //   window.navigator.geolocation.getCurrentPosition(\r\n  //     (pos) => {\r\n  //       let lat = pos.coords.latitude;\r\n  //       let long = pos.coords.longitude;\r\n  //       console.log(lat, long);\r\n  //       fetch(`${api.base}onecall?lat=${lat}&lon=${long}&\r\n  //                 exclude=daily,&appid=${api.key}`)\r\n  //         .then((res) => res.json())\r\n  //         .then((data) => {\r\n  //           console.log(\"data\", data);\r\n  //           const dataSet =\r\n  //           setDailyDataMax(data.daily[1].temp.max - 273.15);\r\n  //           setDailyDataMin(data.daily[1].temp.min - 273.15);\r\n  //           setDailyDataWeather(data.daily[1].weather[0].description);\r\n  //         });\r\n  //     },\r\n  //     (err) => console.log(\"error\", err)\r\n  //   );\r\n  // }, []);\r\n  const search = (evt) => {\r\n    if (evt.key === \"Enter\") {\r\n      setError(\"\");\r\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setWeather(data);\r\n          console.log(\"outside data\", data);\r\n          setQuery(\"\");\r\n          if (data.cod === \"404\") {\r\n            setError(data.message);\r\n            return;\r\n          }\r\n          console.log(\"inside data\", data);\r\n          fetch(`${api.base}onecall?lat=${data.coord.lat}&lon=${data.coord.lon}&\r\n                    exclude=daily,&appid=${api.key}`)\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n              setDailyDataMax(data.daily[1].temp.max - 273.15);\r\n              setDailyDataMin(data.daily[1].temp.min - 273.15);\r\n              setDailyDataWeather(data.daily[1].weather[0].description);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          setError(err.message);\r\n        });\r\n    }\r\n  };\r\n\r\n  const dateBuilder = (d) => {\r\n    let months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n      \"Sunday\",\r\n    ];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        typeof weather.main != \"undefined\"\r\n          ? weather.weather[0].main.toLowerCase()\r\n          : \"app\"\r\n      }\r\n    >\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-bar\"\r\n            placeholder=\"Search\"\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n          />\r\n        </div>\r\n        {error && (\r\n          <div className=\"weather-box\">\r\n            <div className=\"error\">{error}</div>\r\n          </div>\r\n        )}\r\n        {typeof weather.main != \"undefined\" && (\r\n          <div>\r\n            <div className=\"location-box\">\r\n              <div className=\"location\">\r\n                {weather.name}, {weather.sys.country}\r\n              </div>\r\n              <div className=\"date\">{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className=\"weather-box\">\r\n              <div className=\"temp\">{Math.round(weather.main.temp)}&#176;C</div>\r\n              <div className=\"weather\">\r\n                <div id=\"feels-like\">\r\n                  {\" \"}\r\n                  Feels like &nbsp;\r\n                  {Math.round(weather.main.feels_like)}&#176;\r\n                </div>\r\n                {weather.weather[0].main}\r\n                <h6>Tomorrow</h6>\r\n                <p>{dailyDataWeather}</p>\r\n                <p>\r\n                  Max {Math.floor(dailyDataMax)}&#176; / Min{\" \"}\r\n                  {Math.floor(dailyDataMin)}&#176;\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App/>,document.querySelector('#root')\n);\n\n\n"],"sourceRoot":""}